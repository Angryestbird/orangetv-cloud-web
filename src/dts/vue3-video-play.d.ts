declare module 'vue3-video-play' {

    // generated by run "vue-tsc --declaration --emitDeclarationOnly"
    import type { PropType } from 'vue';
    declare const _default: {
        new(...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                title: string;
                type: string;
                speedRate: unknown[];
                volume: string | number;
                width: string;
                height: string;
                color: string;
                src: string;
                poster: string;
                webFullScreen: boolean;
                speed: boolean;
                currentTime: number;
                playsinline: boolean;
                muted: boolean;
                autoPlay: boolean;
                loop: boolean;
                mirror: boolean;
                ligthOff: boolean;
                control: boolean;
                controlBtns: string[];
                preload: string;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                width: {
                    type: StringConstructor;
                    default: string;
                };
                height: {
                    type: StringConstructor;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                src: {
                    required: boolean;
                    type: StringConstructor;
                    default: string;
                };
                title: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                poster: {
                    type: StringConstructor;
                    default: string;
                };
                webFullScreen: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                speed: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                currentTime: {
                    type: NumberConstructor;
                    default: number;
                };
                playsinline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                muted: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                speedRate: {
                    type: ArrayConstructor;
                    default: () => string[];
                };
                autoPlay: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loop: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                mirror: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ligthOff: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                volume: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                control: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                controlBtns: {
                    type: PropType<string[]>;
                    default: string[];
                };
                preload: {
                    type: StringConstructor;
                    default: string;
                };
            }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "type" | "speedRate" | "volume" | "width" | "height" | "color" | "src" | "poster" | "webFullScreen" | "speed" | "currentTime" | "playsinline" | "muted" | "autoPlay" | "loop" | "mirror" | "ligthOff" | "control" | "controlBtns" | "preload">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                width: {
                    type: StringConstructor;
                    default: string;
                };
                height: {
                    type: StringConstructor;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                src: {
                    required: boolean;
                    type: StringConstructor;
                    default: string;
                };
                title: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                poster: {
                    type: StringConstructor;
                    default: string;
                };
                webFullScreen: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                speed: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                currentTime: {
                    type: NumberConstructor;
                    default: number;
                };
                playsinline: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                muted: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                speedRate: {
                    type: ArrayConstructor;
                    default: () => string[];
                };
                autoPlay: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                loop: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                mirror: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ligthOff: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                volume: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                control: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                controlBtns: {
                    type: PropType<string[]>;
                    default: string[];
                };
                preload: {
                    type: StringConstructor;
                    default: string;
                };
            }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                title: string;
                type: string;
                speedRate: unknown[];
                volume: string | number;
                width: string;
                height: string;
                color: string;
                src: string;
                poster: string;
                webFullScreen: boolean;
                speed: boolean;
                currentTime: number;
                playsinline: boolean;
                muted: boolean;
                autoPlay: boolean;
                loop: boolean;
                mirror: boolean;
                ligthOff: boolean;
                control: boolean;
                controlBtns: string[];
                preload: string;
            }> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            width: {
                type: StringConstructor;
                default: string;
            };
            height: {
                type: StringConstructor;
                default: string;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            src: {
                required: boolean;
                type: StringConstructor;
                default: string;
            };
            title: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            poster: {
                type: StringConstructor;
                default: string;
            };
            webFullScreen: {
                type: BooleanConstructor;
                default: boolean;
            };
            speed: {
                type: BooleanConstructor;
                default: boolean;
            };
            currentTime: {
                type: NumberConstructor;
                default: number;
            };
            playsinline: {
                type: BooleanConstructor;
                default: boolean;
            };
            muted: {
                type: BooleanConstructor;
                default: boolean;
            };
            speedRate: {
                type: ArrayConstructor;
                default: () => string[];
            };
            autoPlay: {
                type: BooleanConstructor;
                default: boolean;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            mirror: {
                type: BooleanConstructor;
                default: boolean;
            };
            ligthOff: {
                type: BooleanConstructor;
                default: boolean;
            };
            volume: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            control: {
                type: BooleanConstructor;
                default: boolean;
            };
            controlBtns: {
                type: PropType<string[]>;
                default: string[];
            };
            preload: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        width: {
            type: StringConstructor;
            default: string;
        };
        height: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        src: {
            required: boolean;
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        poster: {
            type: StringConstructor;
            default: string;
        };
        webFullScreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        speed: {
            type: BooleanConstructor;
            default: boolean;
        };
        currentTime: {
            type: NumberConstructor;
            default: number;
        };
        playsinline: {
            type: BooleanConstructor;
            default: boolean;
        };
        muted: {
            type: BooleanConstructor;
            default: boolean;
        };
        speedRate: {
            type: ArrayConstructor;
            default: () => string[];
        };
        autoPlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        mirror: {
            type: BooleanConstructor;
            default: boolean;
        };
        ligthOff: {
            type: BooleanConstructor;
            default: boolean;
        };
        volume: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        control: {
            type: BooleanConstructor;
            default: boolean;
        };
        controlBtns: {
            type: PropType<string[]>;
            default: string[];
        };
        preload: {
            type: StringConstructor;
            default: string;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
        title: string;
        type: string;
        speedRate: unknown[];
        volume: string | number;
        width: string;
        height: string;
        color: string;
        src: string;
        poster: string;
        webFullScreen: boolean;
        speed: boolean;
        currentTime: number;
        playsinline: boolean;
        muted: boolean;
        autoPlay: boolean;
        loop: boolean;
        mirror: boolean;
        ligthOff: boolean;
        control: boolean;
        controlBtns: string[];
        preload: string;
    }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {};
    });
    export default _default;

    export const videoPlay = _default;
}